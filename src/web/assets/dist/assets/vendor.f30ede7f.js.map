{"version":3,"file":"vendor.f30ede7f.js","sources":["../../../../../buildchain/node_modules/vue-confetti/src/utils/get-random-number.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/base.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/circle.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/rect.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/heart.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/image.js","../../../../../buildchain/node_modules/vue-confetti/src/factories/particle.js","../../../../../buildchain/node_modules/vue-confetti/src/particle-manager.js","../../../../../buildchain/node_modules/vue-confetti/src/canvas.js","../../../../../buildchain/node_modules/vue-confetti/src/confetti.js"],"sourcesContent":["/**\n * Return a random number.\n * @param {Number} [min]\n *   The minimum number (default 1).\n * @param {Number} [max]\n *   The maximum number (default min + 1).\n * @param {boolean} round\n *   True to round the number to the nearest integer, false otherwise.\n * @return {Number}\n *   A random number between min and max.\n */\nexport default (min = 1, max = min + 1, round = false) => {\n  const minN = parseFloat(min);\n  const maxN = parseFloat(max);\n  const n = Math.random() * (maxN - minN) + minN;\n  return round ? Math.round(n) : n;\n};\n","import getRandomNumber from '../utils/get-random-number';\n\n/**\n * A particle that can be drawn on a canvas.\n */\nexport default class BaseParticle {\n  /**\n   * Initialise.\n   * @param {object} options\n   *   The particle options.\n   * @param {string} options.color\n   *   The particle color.\n   * @param {number} options.size\n   *   The particle size.\n   * @param {number} options.dropRate\n   *   The speed at which particles fall.\n   */\n  constructor({\n    color = 'blue',\n    size = 10,\n    dropRate = 10,\n  } = {}) {\n    this.color = color;\n    this.size = size;\n    this.dropRate = dropRate;\n  }\n\n  /**\n   * Setup.\n   * @param {options} opts\n   *   The particle options.\n   */\n  setup({\n    canvas,\n    wind,\n    windPosCoef,\n    windSpeedMax,\n    count,\n  }) {\n    this.canvas = canvas;\n    this.wind = wind;\n    this.windPosCoef = windPosCoef;\n    this.windSpeedMax = windSpeedMax;\n    this.x = getRandomNumber(-35, this.canvas.width + 35);\n    this.y = getRandomNumber(-30, -35);\n    this.d = getRandomNumber(150) + 10; // density\n    this.particleSize = getRandomNumber(this.size, this.size * 2);\n    this.tilt = getRandomNumber(10);\n    this.tiltAngleIncremental = (\n      (getRandomNumber(0, 0.08) + 0.04) * (getRandomNumber() < 0.5 ? -1 : 1)\n    );\n    this.tiltAngle = 0;\n    this.angle = getRandomNumber(Math.PI * 2);\n    this.count = count + 1;\n    this.remove = false;\n    return this;\n  }\n\n  /**\n   * Update the particle.\n   */\n  update() {\n    this.tiltAngle += (this.tiltAngleIncremental * (\n      Math.cos(this.wind + (this.d + this.x + this.y) * this.windPosCoef)\n      * 0.2 + 1\n    ));\n    this.y += (Math.cos(this.angle + this.d) + parseInt(this.dropRate, 10)) / 2;\n\n    this.x += (Math.sin(this.angle) + Math.cos(\n      this.wind + (this.d + this.x + this.y) * this.windPosCoef,\n    )) * this.windSpeedMax;\n    this.y += Math.sin(\n      this.wind + (this.d + this.x + this.y) * this.windPosCoef,\n    ) * this.windSpeedMax;\n    this.tilt = (Math.sin(this.tiltAngle - (this.count / 3))) * 15;\n  }\n\n  /**\n   * Check if the particle is past the bottom of the canvas;\n   */\n  pastBottom() {\n    return this.y > this.canvas.height;\n  }\n\n  /**\n   * Draw a particle.\n   */\n  draw() {\n    this.canvas.ctx.fillStyle = this.color;\n    this.canvas.ctx.beginPath();\n    this.canvas.ctx.setTransform(\n      Math.cos(this.tiltAngle), // set the x axis to the tilt angle\n      Math.sin(this.tiltAngle),\n      0,\n      1,\n      this.x,\n      this.y, // set the origin\n    );\n  }\n\n  /**\n   * Kill the particle after it has left the screen.\n   */\n  kill() {\n    this.remove = true;\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a circular particle.\n */\nexport default class CircleParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.arc(0, 0, (this.particleSize / 2), 0, Math.PI * 2, false);\n    this.canvas.ctx.fill();\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a rectangular particle.\n */\nexport default class RectParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.fillRect(0, 0, this.particleSize, this.particleSize / 2);\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a heart-shaped particle.\n */\nexport default class HeartParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    const curveTo = (cp1x, cp1y, cp2x, cp2y, x, y) => {\n      this.canvas.ctx.bezierCurveTo(\n        cp1x * (this.particleSize / 200),\n        cp1y * (this.particleSize / 200),\n        cp2x * (this.particleSize / 200),\n        cp2y * (this.particleSize / 200),\n        x * (this.particleSize / 200),\n        y * (this.particleSize / 200),\n      );\n    };\n    this.canvas.ctx.moveTo(37.5 / this.particleSize, 20 / this.particleSize);\n    curveTo(75, 37, 70, 25, 50, 25);\n    curveTo(20, 25, 20, 62.5, 20, 62.5);\n    curveTo(20, 80, 40, 102, 75, 120);\n    curveTo(110, 102, 130, 80, 130, 62.5);\n    curveTo(130, 62.5, 130, 25, 100, 25);\n    curveTo(85, 25, 75, 37, 75, 40);\n    this.canvas.ctx.fill();\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing an image particle.\n */\nexport default class ImageParticle extends BaseParticle {\n  /**\n   * Initialise\n   * @param {HTMLImageElement} imgEl\n   *  An image element to pass through to ctx.drawImage.\n   */\n  constructor(opts, imgEl) {\n    super(opts);\n\n    this.imgEl = imgEl;\n  }\n\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.drawImage(this.imgEl, 0, 0, this.particleSize, this.particleSize);\n  }\n}\n","import getRandomNumber from '../utils/get-random-number';\nimport {\n  CircleParticle,\n  RectParticle,\n  HeartParticle,\n  ImageParticle,\n} from '../particles';\n\n/**\n * Create a particle based on the given options.\n * @param {object} options\n *   The particle options.\n * @returns {object}\n *   A particle.\n */\nexport default class ParticleFactory {\n  constructor() {\n    this.cachedImages = {};\n  }\n\n  /**\n   * Create an image element from the given source.\n   * @param {string} imgSource\n   *   The path to the image.\n   */\n  createImageElement(imgSource) {\n    const imgEl = document.createElement('img');\n    imgEl.setAttribute('src', imgSource);\n    return imgEl;\n  }\n\n  /**\n   * Get an image element from a source string.\n   * @param {string} imgSource\n   *   The path to the image.\n   */\n  getImageElement(imgSource) {\n    if (!this.cachedImages[imgSource]) {\n      this.cachedImages[imgSource] = this.createImageElement(imgSource);\n    }\n    return this.cachedImages[imgSource];\n  }\n\n  /**\n   * Get a random particle from the list of available particles.\n   * @param {Object} options\n   *   The particle options.\n   */\n  getRandomParticle(options = {}) {\n    const particles = options.particles || [];\n\n    if (particles.length < 1) {\n      return {};\n    }\n\n    return particles[Math.floor(Math.random() * particles.length)];\n  }\n\n  /**\n   * Get the particle defaults.\n   * @param {Object} options\n   *   The particle options.\n   */\n  getDefaults(options = {}) {\n    return {\n      type: options.defaultType || 'circle',\n      size: options.defaultSize || 10,\n      dropRate: options.defaultDropRate || 10,\n      colors: options.defaultColors || [\n        'DodgerBlue',\n        'OliveDrab',\n        'Gold',\n        'pink',\n        'SlateBlue',\n        'lightblue',\n        'Violet',\n        'PaleGreen',\n        'SteelBlue',\n        'SandyBrown',\n        'Chocolate',\n        'Crimson',\n      ],\n      url: null,\n    };\n  }\n\n  /**\n   * Create a particle.\n   * @param {Object} options\n   *   The particle options.\n   */\n  create(options) {\n    const defaults = this.getDefaults(options);\n    const particle = this.getRandomParticle(options);\n\n    const opts = Object.assign(defaults, particle);\n\n    // Set a random color from the array\n    const colorIndex = getRandomNumber(0, opts.colors.length - 1, true);\n    opts.color = opts.colors[colorIndex];\n\n    if (opts.type === 'circle') {\n      return new CircleParticle(opts);\n    }\n\n    if (opts.type === 'rect') {\n      return new RectParticle(opts);\n    }\n\n    if (opts.type === 'heart') {\n      return new HeartParticle(opts);\n    }\n\n    if (opts.type === 'image') {\n      return new ImageParticle(opts, this.getImageElement(opts.url));\n    }\n\n    throw Error(`Unknown particle type: \"${opts.type}\"`);\n  }\n}\n","import ParticleFactory from './factories/particle';\n\n/**\n * A particle generation and management service.\n */\nexport default class ParticleManger {\n  /**\n   * Initialise.\n   * @param {object} particleOptions\n   *   The particle options.\n   */\n  constructor(particleOptions) {\n    this.items = [];\n    this.pool = [];\n    this.particleOptions = particleOptions;\n    this.particleFactory = new ParticleFactory();\n  }\n\n  /**\n   * Update the position of each particle.\n   *\n   * Moves particles back to the pool if past the bottom and not due for removal.\n   */\n  update() {\n    const oldItems = [];\n    const newItems = [];\n\n    this.items.forEach((particle) => {\n      particle.update();\n\n      if (particle.pastBottom()) {\n        if (!particle.remove) {\n          particle.setup(this.particleOptions);\n          oldItems.push(particle);\n        }\n      } else {\n        newItems.push(particle);\n      }\n    });\n\n    this.pool.push(...oldItems);\n\n    this.items = newItems;\n  }\n\n  /**\n   * Draw the particles currently in view.\n   */\n  draw() {\n    this.items.forEach(item => item.draw());\n  }\n\n  /**\n   * Add an item to the view.\n   */\n  add() {\n    if (this.pool.length > 0) {\n      this.items.push(this.pool.pop().setup(this.particleOptions));\n    } else {\n      this.items.push(\n        this.particleFactory.create(this.particleOptions).setup(this.particleOptions),\n      );\n    }\n  }\n\n  /**\n   * Replace particles once they have left the screen.\n   */\n  refresh() {\n    this.items.forEach((item) => {\n      item.kill();\n    });\n\n    this.pool = [];\n  }\n}\n","/**\n * Class to generate and interact with an HTML canvas.\n */\nexport default class Canvas {\n  /**\n   * Initialise.\n   * @param {HTMLCanvasElement} [canvasElement]\n   *   An optional HTMLCanvasElement to override the default.\n   */\n  constructor(canvasElement) {\n    const defaultCanvasId = 'confetti-canvas';\n\n    if (canvasElement && !(canvasElement instanceof HTMLCanvasElement)) {\n      throw new Error('Element is not a valid HTMLCanvasElement');\n    }\n\n    this.isDefault = !canvasElement;\n\n    this.canvas = canvasElement || Canvas.createDefaultCanvas(defaultCanvasId);\n\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  /**\n   * Add a fixed, full-screen canvas to the page.\n   * @returns {HTMLCanvasElement}\n   *   A full-screen canvas.\n   */\n  static createDefaultCanvas(id) {\n    const canvas = document.createElement('canvas');\n    canvas.style.display = 'block';\n    canvas.style.position = 'fixed';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.top = 0;\n    canvas.style.width = '100vw';\n    canvas.style.height = '100vh';\n    canvas.id = id;\n    document.querySelector('body').appendChild(canvas);\n    return canvas;\n  }\n\n  /**\n   * Get the canvas width.\n   * @returns {Number}\n   *   The canvas width.\n   */\n  get width() {\n    return this.canvas.width;\n  }\n\n  /**\n   * Get the canvas height.\n   * @returns {Number}\n   *   The canvas height.\n   */\n  get height() {\n    return this.canvas.height;\n  }\n\n  /**\n   * Clear the canvas.\n   */\n  clear() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Update the canvas dimensions, if necessary.\n   */\n  updateDimensions() {\n    if (!this.isDefault) {\n      return;\n    }\n\n    if (this.width !== window.innerWidth || this.height !== window.innerHeight) {\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n    }\n  }\n}\n","import ParticleManager from './particle-manager';\nimport Canvas from './canvas';\n\n/**\n * A class to drawing confetti onto a canvas.\n */\nexport default class Confetti {\n  /**\n   * Initialise.\n   */\n  constructor() {\n    this.setDefaults();\n  }\n\n  /**\n   * Initialize default.\n   */\n  setDefaults() {\n    this.killed = false;\n    this.framesSinceDrop = 0;\n    this.canvas = null;\n    this.canvasEl = null;\n    this.W = 0;\n    this.H = 0;\n    this.particleManager = null;\n    this.particlesPerFrame = 0; // max particles dropped per frame\n    this.wind = 0;\n    this.windSpeed = 1;\n    this.windSpeedMax = 1;\n    this.windChange = 0.01;\n    this.windPosCoef = 0.002;\n    this.animationId = null;\n  }\n\n  getParticleOptions(opts) {\n    const options = {\n      canvas: this.canvas,\n      W: this.W,\n      H: this.H,\n      wind: this.wind,\n      windPosCoef: this.windPosCoef,\n      windSpeedMax: this.windSpeedMax,\n      count: 0,\n    };\n\n    Object.assign(options, opts);\n\n    return options;\n  }\n\n  /**\n   * Create the confetti particles.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  createParticles(opts = {}) {\n    const particleOpts = this.getParticleOptions(opts);\n    this.particleManager = new ParticleManager(particleOpts);\n  }\n\n  /**\n   * Get a canvas element from the given options.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  getCanvasElementFromOptions(opts) {\n    const { canvasId, canvasElement } = opts;\n    let canvasEl = canvasElement;\n\n    if (canvasElement && !(canvasElement instanceof HTMLCanvasElement)) {\n      throw new Error('Invalid options: canvasElement is not a valid HTMLCanvasElement');\n    }\n\n    if (canvasId && canvasElement) {\n      throw new Error('Invalid options: canvasId and canvasElement are mutually exclusive');\n    }\n\n    if (canvasId && !canvasEl) {\n      canvasEl = document.getElementById(canvasId);\n    }\n\n    if (canvasId && !(canvasEl instanceof HTMLCanvasElement)) {\n      throw new Error(`Invalid options: element with id \"${canvasId}\" is not a valid HTMLCanvasElement`);\n    }\n\n    return canvasEl;\n  }\n\n  /**\n   * Start dropping confetti.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  start(opts = {}) {\n    this.remove(); // clear any previous settings\n\n    const canvasEl = this.getCanvasElementFromOptions(opts);\n\n    this.canvas = new Canvas(canvasEl);\n    this.canvasEl = canvasEl;\n\n    this.createParticles(opts);\n    this.setGlobalOptions(opts);\n    this.animationId = requestAnimationFrame(this.mainLoop.bind(this));\n  }\n\n  /**\n   * Set the global options.\n   */\n  setGlobalOptions(opts) {\n    this.particlesPerFrame = opts.particlesPerFrame || 2;\n    this.windSpeedMax = opts.windSpeedMax || 1;\n  }\n\n  /**\n   * Stop dropping confetti.\n   */\n  stop() {\n    this.killed = true;\n    this.particlesPerFrame = 0;\n  }\n\n  /**\n   * Update the confetti options.\n   */\n  update(opts) {\n    const canvasEl = this.getCanvasElementFromOptions(opts);\n\n    // Restart if a different canvas is given\n    if (this.canvas && canvasEl !== this.canvasEl) {\n      this.start(opts);\n      return;\n    }\n\n    this.setGlobalOptions(opts);\n\n    if (this.particleManager) {\n      this.particleManager.particleOptions = this.getParticleOptions(opts);\n      this.particleManager.refresh();\n    }\n  }\n\n  /**\n   * Remove confetti.\n   */\n  remove() {\n    this.stop();\n\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n\n    if (this.canvas) {\n      this.canvas.clear();\n    }\n\n    this.setDefaults();\n  }\n\n  /**\n   * Run the main animation loop.\n   */\n  mainLoop(time) {\n    this.canvas.updateDimensions();\n    this.canvas.clear();\n\n    this.windSpeed = Math.sin(time / 8000) * this.windSpeedMax;\n    this.wind = this.particleManager.particleOptions.wind += this.windChange; // eslint-disable-line\n\n    let numberToAdd = this.framesSinceDrop * this.particlesPerFrame;\n\n    while (numberToAdd >= 1) {\n      this.particleManager.add();\n      numberToAdd -= 1;\n      this.framesSinceDrop = 0;\n    }\n\n    this.particleManager.update();\n    this.particleManager.draw();\n\n    // Stop calling if no particles left in view (i.e. it's been stopped)\n    if (!this.killed || this.particleManager.items.length) {\n      this.animationId = requestAnimationFrame(this.mainLoop.bind(this));\n    }\n\n    this.framesSinceDrop += 1;\n  }\n}\n"],"names":["min","max","round","minN","parseFloat","maxN","n","Math","random","[object Object]","color","size","dropRate","size2","canvas","wind","windPosCoef","windSpeedMax","count","x","getRandomNumber","this","width","y","d","particleSize","tilt","tiltAngleIncremental","tiltAngle","angle","PI","remove","cos","parseInt","sin","height","ctx","fillStyle","beginPath","setTransform","BaseParticle","draw","arc","fill","fillRect","curveTo","cp1x","cp1y","cp2x","cp2y","bezierCurveTo","moveTo","opts","imgEl","drawImage","cachedImages","imgSource","document","createElement","setAttribute","createImageElement","options","particles","length","floor","type","defaultType","defaultSize","defaultDropRate","colors","defaultColors","url","defaults","getDefaults","particle","getRandomParticle","Object","assign","colorIndex","CircleParticle","RectParticle","HeartParticle","ImageParticle","getImageElement","Error","particleOptions","items","pool","particleFactory","ParticleFactory","oldItems","newItems","forEach","update","pastBottom","setup","push","item","pop","create","kill","canvasElement","HTMLCanvasElement","isDefault","Canvas","createDefaultCanvas","getContext","id","style","display","position","pointerEvents","top","querySelector","appendChild","clearRect","window","innerWidth","innerHeight","setDefaults","killed","framesSinceDrop","canvasEl","W","H","particleManager","particlesPerFrame","windSpeed","windChange","animationId","particleOpts","getParticleOptions","ParticleManager","canvasId","getElementById","getCanvasElementFromOptions","createParticles","setGlobalOptions","requestAnimationFrame","mainLoop","bind","start","refresh","stop","clear","time","updateDimensions","numberToAdd","add"],"mappings":"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"}